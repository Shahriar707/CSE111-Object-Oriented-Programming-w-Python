Name: Shahriar Ahmed
ID: 20101588
Section: 11
Course: CSE111
Assignment: Lab-7


#Question-1:

class Student:
    s=globals()
    s=1
    def __init__(self,name,department,age,cgpa):  
        self.name=name
        self.dept=department
        self.age=age
        self.cg=cgpa
    def get_details(self):
        print("ID:",Student.s)
        print("Name:",self.name)
        print("Department:",self.dept)
        print("Age:",self.age)
        print("CGPA:",self.cgpa)
        Student.s+=1
    @classmethod
    def from_String(cls,str):
        name,department,age,cgpa = str.split("-")
        return Student(name,department,age,cgpa)


s1 = Student("Samin", "CSE", 21, 3.91)
s1.get_details()
print("-----------------------")
s2 = Student("Fahim", "ECE", 21, 3.85)
s2.get_details()
print("-----------------------")
s3 = Student("Tahura", "EEE", 22, 3.01)
s3.get_details()
print("-----------------------")
s4 = Student.from_String("Sumaiya-BBA-23-3.96")
s4.get_details()

print ("Instance variables, unlike class variables, are owned by an instance of a class. This means that the value of each instance variable can be different, whereas, in a class variable, the variable can only have one value that you assign when you declare the variable")
print ("Instance methods need a class instance and can access the instance through self . Class methods don't need a class instance. They can't access the instance 'self' but they have access to the class itself via cls")


#Question-2:

class Course:
    courses =globals()
    def __init__(self,courses):
        self.courses=courses

class Teacher(Course):
    def __init__(self,name,department):
        self.__name=name
        self.__department=department
        self.x=[]

    def addCourse(self,name):
        self.x.append(name.courses)


    def printDetail(self):
        print("===============================")
        print("Name:",self.__name)
        print("Department:",self.__department)
        print("List of Courses")
        print("===============================")
        for i in self.x:
            print(i)
        print("===============================")


t1 = Teacher("Saad Abdullah", "CSE")
t2 = Teacher("Mumit Khan", "CSE")
t3 = Teacher("Sadia Kazi", "CSE")
c1 = Course("CSE 110 Programming Language I")
c2 = Course("CSE 111 Programming Language-II")
c3 = Course("CSE 220 Data Structures")
c4 = Course("CSE 221 Algorithms")
c5 = Course("CCSE 230 Discrete Mathematics")
c6 = Course("CSE 310 Object Oriented Programming")
c7 = Course("CSE 320 Data Communications")
c8 = Course("CSE 340 Computer Architecture")
t1.addCourse(c1)
t1.addCourse(c2)
t2.addCourse(c3)
t2.addCourse(c4)
t2.addCourse(c5)
t3.addCourse(c6)
t3.addCourse(c7)
t3.addCourse(c8)
t1.printDetail()
t2.printDetail()
t3.printDetail()


#Question-3:

class Dates:

    def __init__(self, date):
        self.user_date = date

    def getDate(self):
        return self.user_date

    @classmethod
    def toDashDate(self, other):
        result = self(other.replace("/","-"))
        return result

date1 = Dates("05-09-2020")
dateFromDB = "05/09/2020"
date2= Dates.toDashDate(dateFromDB)

if(date1.getDate() == date2.getDate()):
    print("Equal")
else:
    print("Unequal")
    
print("It's showing equal as object date1 took '05-09-2020' value as argument and object date2 took '05/09/2020' and then converted to the same date1 by replacing / with - using toDashDate method")


#Question-4:

import math
class Circle:

    def __init__(self, radius):
        self.__radius = radius

    def getRadius(self):
        return self.__radius

    def area(self):
        return math.pi * (self.__radius ** 2)

    def __add__(self, other):
        area = Circle(self.__radius + other.__radius)
        return area



c1 = Circle(4)
print("First circle radius:" , c1.getRadius())
print("First circle area:" ,c1.area())
c2 = Circle(5)
print("Second circle radius:" ,c2.getRadius())
print("Second circle area:" ,c2.area())
c3 = c1 + c2
print("Third circle radius:" ,c3.getRadius())
print("Third circle area:" ,c3.area())


#Question-5:

class Dolls:

    def __init__(self, name, price):
        self.doll_name = name
        self.doll_price = price

    def detail(self):
        return f'Doll: {self.doll_name}\nTotal Price: {self.doll_price}'

    def __gt__(self, other):
        return self.doll_price > other.doll_price

    def __lt__(self, other):
        return self.doll_price < other.doll_price

    def __add__(self, other):
        obj = Dolls(self.doll_name + " " + other.doll_name ,self.doll_price + other.doll_price)
        return obj

obj_1 = Dolls("Tweety", 2500)
print(obj_1.detail())
if obj_1 > obj_1:
    print("Congratulations! You get the Tweety as a gift!")
else:
    print("Thank you!")
print("=========================")
obj_2 = Dolls("Daffy Duck", 1800)
print(obj_2.detail())
if obj_2 > obj_1:
    print("Congratulations! You get the Tweety as a gift!")
else:
    print("Thank you!")
print("=========================")
obj_3 = Dolls("Bugs Bunny", 3000)
print(obj_3.detail())
if obj_3 > obj_1:
    print("Congratulations! You get the Tweety as a gift!")
else:
    print("Thank you!")
print("=========================")
obj_4 = Dolls("Porky Pig", 1500)
print(obj_4.detail())
if obj_4 > obj_1:
    print("Congratulations! You get the Tweety as a gift!")
else:
    print("Thank you!")
print("=========================")
obj_5 = obj_2 + obj_3
print(obj_5.detail())
if obj_5 > obj_1:
    print("Congratulations! You get the Tweety as a gift!")